name: Build & Publish OHLC

on:
  workflow_dispatch:
  schedule:
    - cron: "15 2 * * *"   # daily at 02:15 UTC

permissions:
  contents: write

jobs:
  build_publish:
    runs-on: ubuntu-latest

    # expose FTP secrets as env so we can safely check them in `if:`
    env:
      FTP_HOST: ${{ secrets.FTP_HOST }}
      FTP_USER: ${{ secrets.FTP_USER }}
      FTP_PASS: ${{ secrets.FTP_PASS }}
      FTP_ROOT: ${{ secrets.FTP_ROOT }}

      # R2 secrets (read by the uploader step)
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # If you only have tickers.txt, copy it to tickers.csv for the uploader
      - name: Ensure tickers.csv exists
        run: |
          if [ ! -f tickers.csv ] && [ -f tickers.txt ]; then
            cp tickers.txt tickers.csv
          fi
          test -f tickers.csv && { echo "tickers.csv preview:"; head -5 tickers.csv; } || true

      # === Build OHLC data (your existing process) ===
      - name: Build OHLC artifacts
        run: |
          set -e
          python update_tickers.py
          echo "Built OHLC artifacts:"
          ls -lah data | sed 's/^/  /'
          [ -f data/yesterday.json ] && jq -r '.[0] | keys | @csv' data/yesterday.json || true

      # === Build names (ticker_meta.json) ===
      - name: Build ticker_meta.json (names via SEC; no FMP)
        run: |
          set -e
          python scripts/build_ticker_meta.py
          echo "Preview ticker_meta.json:"
          head -n 40 data/ticker_meta.json || true

      # Commit outputs back to repo (only if there are changes)
      - name: Commit & push outputs
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A data/*.csv data/*.json data/raw/*.csv tickers.txt || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "build: update yesterday.json, latest.csv, ticker_meta.json"
            git push origin HEAD:${{ github.ref_name }}
          fi

      # === Publish to Cloudflare R2 (host-independent) ===
      # upload_r2_tickers.py:
      #  - writes per-ticker stubs to R2: ohlc/<SYMBOL>.json
      #  - writes aggregate: ohlc/latest_sp500.json (array of rows for WP table)
      - name: Upload OHLC to R2
        run: |
          set -e
          python upload_r2_tickers.py

      # === Optional: keep old FTP deploy (runs only if FTP_* are set) ===
      - name: Deploy tickers + meta via FTP (optional)
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' && env.FTP_ROOT != '' }}
        shell: bash
        run: |
          set -euo pipefail
          BASE="${FTP_ROOT%/}/wp-content/uploads/data"
          echo "Uploading to ftp://${FTP_HOST}${BASE}"

          # Upload tickers.json (from yesterday.json)
          if [ -f ./data/yesterday.json ]; then
            curl --ftp-create-dirs --ftp-method nocwd --ftp-pasv \
              -T ./data/yesterday.json \
              --user "${FTP_USER}:${FTP_PASS}" \
              "ftp://${FTP_HOST}${BASE}/tickers.json"
          fi

          # Upload names (ticker_meta.json)
          if [ -f ./data/ticker_meta.json ]; then
            curl --ftp-create-dirs --ftp-method nocwd --ftp-pasv \
              -T ./data/ticker_meta.json \
              --user "${FTP_USER}:${FTP_PASS}" \
              "ftp://${FTP_HOST}${BASE}/ticker_meta.json"
          fi

          echo "Deployed tickers.json and ticker_meta.json (if present)"
