name: Build yesterday's JSON

on:
  workflow_dispatch:
  schedule:
    - cron: "0 13 * * 1-5"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install yfinance pandas beautifulsoup4 requests

      - name: Ensure tickers.txt (create if <400)
        shell: bash
        run: |
          set -euo pipefail
          echo "Checking tickers.txt …"
          count=$(grep -E "^[A-Za-z0-9.-]+" tickers.txt 2>/dev/null | wc -l || echo 0)
          echo "tickers.txt count: $count"
          if [ "$count" -lt 400 ]; then
            echo "Fetching S&P 500 constituents CSV…"
            curl -sSfL --connect-timeout 5 --max-time 20 -o constituents.csv \
              https://raw.githubusercontent.com/datasets/s-and-p-500-companies/master/data/constituents.csv \
              || curl -sSfL --connect-timeout 5 --max-time 20 -o constituents.csv \
              https://cdn.jsdelivr.net/gh/datasets/s-and-p-500-companies/data/constituents.csv
            awk -F, 'NR>1 {print $1}' constituents.csv > tickers.txt
            rm constituents.csv
            echo "Refreshed tickers.txt ($(wc -l < tickers.txt)) symbols"
          fi

      - name: Guard >= 400 tickers
        shell: bash
        run: |
          n=$(grep -E "^[A-Za-z0-9.-]+" tickers.txt | wc -l)
          echo "tickers.txt count: $n"
          if [ "$n" -lt 400 ]; then
            echo "::error::tickers.txt has only $n symbols"
            exit 1
          fi

      # ---- Build data (try 1) ----
      - name: Build data (try 1)
        env:
          PYTHONUNBUFFERED: "1"
        shell: bash
        run: |
          set -euo pipefail
          echo "Starting fetch_ohlc.py @ $(date -u)"
          if timeout 90s python -u fetch_ohlc.py; then
            echo "fetch_ohlc.py finished"
          else
            code=$?
            echo "::warning::fetch_ohlc.py failed or timed out (exit $code)"
            exit $code
          fi
          echo "Quick sanity:"
          python - <<'PY'
          import json, pathlib, sys
          p = pathlib.Path('data/yesterday.json')
          rows = len(json.loads(p.read_text())) if p.exists() else 0
          print("rows:", rows)
          sys.exit(0 if rows >= 400 else 2)
          PY

      # ---- Retry build (try 2) ----
      - name: Retry build (try 2)
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          echo "Retrying after 10s…"; sleep 10
          timeout 90s python -u fetch_ohlc.py
          python - <<'PY'
          import json, pathlib, sys
          p = pathlib.Path('data/yesterday.json')
          rows = len(json.loads(p.read_text())) if p.exists() else 0
          print("rows (retry):", rows)
          sys.exit(0 if rows >= 400 else 2)
          PY

      - name: Commit & push outputs (only if complete)
        if: success()
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest.csv data/yesterday.json || true
          git commit -m "build: update aggregates and yesterday.json" || echo "No changes"
          git push origin HEAD:main || echo "Push skipped"

      - name: Post Set up Python
        if: always()
        run: echo "Cleanup done"

      - name: Post Checkout
        if: always()
        run: echo "Done"
