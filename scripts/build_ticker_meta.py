#!/usr/bin/env python3
import json, os, time, sys, pathlib, urllib.parse, urllib.request

ROOT = pathlib.Path(__file__).resolve().parents[1]
DATA_DIR = ROOT / "data"
SRC = DATA_DIR / "yesterday.json"          # already generated by your workflow
OUT = DATA_DIR / "ticker_meta.json"

API_KEY = os.environ.get("FMP_API_KEY", "").strip()
if not API_KEY:
    print("ERROR: FMP_API_KEY not set", file=sys.stderr); sys.exit(1)

def read_symbols():
    with open(SRC, "r", encoding="utf-8") as f:
        raw = json.load(f)

    def pick(o, *keys):
        for k in keys:
            if isinstance(o, dict) and k in o and o[k] not in (None, ""):
                return str(o[k])
        return None

    syms = []
    if isinstance(raw, list):
        for row in raw:
            sym = pick(row, "symbol", "ticker", "Symbol", "code", "sym")
            if sym: syms.append(sym.upper())
    elif isinstance(raw, dict):
        syms = [str(k).upper() for k in raw.keys()]

    # de-dup
    seen, uniq = set(), []
    for s in syms:
        if s and s not in seen:
            seen.add(s); uniq.append(s)
    return uniq

def guess_type(sym):
    s = sym.upper()
    if s in {"SPX","^GSPC","SPY"}: return "index"
    if s in {"BTC","BTCUSD","BTC-USD","BTCUSDT"}: return "crypto"
    return "equity"

def fmp_profile(sym):
    url = f"https://financialmodelingprep.com/api/v3/profile/{urllib.parse.quote(sym)}?apikey={urllib.parse.quote(API_KEY)}"
    req = urllib.request.Request(url, headers={"User-Agent":"tptxdev-meta-builder"})
    with urllib.request.urlopen(req, timeout=15) as r:
        data = json.loads(r.read().decode("utf-8", "replace"))
    if isinstance(data, list) and data:
        rec = data[0]
        name = rec.get("companyName") or rec.get("name") or ""
        icon = rec.get("image") or ""
        return {"name": name, "icon": icon}
    return {}

def main():
    syms = read_symbols()
    print(f"Found {len(syms)} symbols")
    meta = {}
    for i, s in enumerate(syms, 1):
        t = guess_type(s)
        info = {}
        if t != "crypto":
            try:
                info = fmp_profile(s)
            except Exception as e:
                print(f"[warn] {s}: {e}", file=sys.stderr)
        else:
            if s in {"BTC","BTC-USD","BTCUSD","BTCUSDT"}:
                info.setdefault("name","Bitcoin")
                info.setdefault("icon","https://assets.coingecko.com/coins/images/1/thumb/bitcoin.png")

        row = {"type": t}
        if info.get("name"): row["name"] = info["name"]
        if info.get("icon"): row["icon"] = info["icon"]
        meta[s] = row

        if i % 50 == 0: print(f"  â€¦{i}/{len(syms)}")
        time.sleep(0.18)  # polite pacing for free tier

    OUT.parent.mkdir(parents=True, exist_ok=True)
    with open(OUT, "w", encoding="utf-8") as f:
        json.dump(meta, f, indent=2, ensure_ascii=False)
    print(f"Wrote {OUT} with {len(meta)} symbols")

if __name__ == "__main__":
    main()
